///
/// HybridImagePerspectiveCropperSpec.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// See ``HybridImagePerspectiveCropperSpec``
public protocol HybridImagePerspectiveCropperSpec_protocol: HybridObject {
  // Properties
  

  // Methods
  func detectRectangleForImage(image: String, onSuccess: @escaping (_ rectangle: Rectangle) -> Void, onError: @escaping (_ message: String) -> Void) throws -> Void
  func cropImage(image: String, rectangle: Rectangle, onSuccess: @escaping (_ image: String) -> Void, onError: @escaping (_ message: String) -> Void) throws -> Void
}

/// See ``HybridImagePerspectiveCropperSpec``
public class HybridImagePerspectiveCropperSpec_base {
  private weak var cxxWrapper: HybridImagePerspectiveCropperSpec_cxx? = nil
  public func getCxxWrapper() -> HybridImagePerspectiveCropperSpec_cxx {
  #if DEBUG
    guard self is HybridImagePerspectiveCropperSpec else {
      fatalError("`self` is not a `HybridImagePerspectiveCropperSpec`! Did you accidentally inherit from `HybridImagePerspectiveCropperSpec_base` instead of `HybridImagePerspectiveCropperSpec`?")
    }
  #endif
    if let cxxWrapper = self.cxxWrapper {
      return cxxWrapper
    } else {
      let cxxWrapper = HybridImagePerspectiveCropperSpec_cxx(self as! HybridImagePerspectiveCropperSpec)
      self.cxxWrapper = cxxWrapper
      return cxxWrapper
    }
  }
}

/**
 * A Swift base-protocol representing the ImagePerspectiveCropper HybridObject.
 * Implement this protocol to create Swift-based instances of ImagePerspectiveCropper.
 * ```swift
 * class HybridImagePerspectiveCropper : HybridImagePerspectiveCropperSpec {
 *   // ...
 * }
 * ```
 */
public typealias HybridImagePerspectiveCropperSpec = HybridImagePerspectiveCropperSpec_protocol & HybridImagePerspectiveCropperSpec_base
